What is Singleton Pattern?

Singleton Design pattern is one of the simplest design patterns. This pattern ensures that a class has only one instance and provides a global point of access to it.


//eager initialization of singleton
public class Singleton
{
 private static Singleton instance = new Singleton();
 private Singleton() { }

 public static Singleton GetInstance
 {
 get
 {
 return instance;
 }
 }
}

////lazy initialization of singleton
public class Singleton
{
 private static Singleton instance = null;
 private Singleton() { }

 public static Singleton GetInstance
 {
 get
 {
 if (instance == null)
 instance = new Singleton();

 return instance;
 }
 }
}

////Thread-safe (Double-checked Locking) initialization of singleton
public class Singleton
{
 private static Singleton instance = null;
 private Singleton() { }
 private static object lockThis = new object();

 public static Singleton GetInstance
 {
 get
 {
 lock (lockThis)
 {
 if (instance == null)
 instance = new Singleton();

 return instance;
 }
 }
 }
}